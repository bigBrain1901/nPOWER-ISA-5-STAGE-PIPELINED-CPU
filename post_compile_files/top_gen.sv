// Generated by SandPiper(TM) 1.11-2021/01/28-beta from Redwood EDA.
// (Installed here: /usr/local/mono/sandpiper/distro.)
// Redwood EDA does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


`include "sandpiper_gen.vh"


genvar dmem, imem, xreg;


//
// Signals declared top-level.
//

// For |cpu$br_tgt_pc.
logic [31:0] CPU_br_tgt_pc_a2,
             CPU_br_tgt_pc_a3;

// For |cpu$dmem_addr.
logic CPU_dmem_addr_a4,
      CPU_dmem_addr_a5;

// For |cpu$dmem_rd_data.
logic [31:0] CPU_dmem_rd_data_a4,
             CPU_dmem_rd_data_a5;

// For |cpu$dmem_rd_en.
logic CPU_dmem_rd_en_a4,
      CPU_dmem_rd_en_a5;

// For |cpu$dmem_wr_data.
logic [63:0] CPU_dmem_wr_data_a4,
             CPU_dmem_wr_data_a5;

// For |cpu$dmem_wr_en.
logic CPU_dmem_wr_en_a4,
      CPU_dmem_wr_en_a5;

// For |cpu$imem_rd_addr.
logic [3-1:0] CPU_imem_rd_addr_a1,
              CPU_imem_rd_addr_a2,
              CPU_imem_rd_addr_a3,
              CPU_imem_rd_addr_a4,
              CPU_imem_rd_addr_a5;

// For |cpu$imem_rd_data.
logic [31:0] CPU_imem_rd_data_a1;

// For |cpu$imem_rd_en.
logic CPU_imem_rd_en_a1,
      CPU_imem_rd_en_a2,
      CPU_imem_rd_en_a3,
      CPU_imem_rd_en_a4,
      CPU_imem_rd_en_a5;

// For |cpu$imm.
logic [63:0] CPU_imm_a1,
             CPU_imm_a2,
             CPU_imm_a3,
             CPU_imm_a4,
             CPU_imm_a5;

// For |cpu$inc_pc.
logic [31:0] CPU_inc_pc_a1;

// For |cpu$instr.
logic [31:0] CPU_instr_a1;

// For |cpu$is_add.
logic CPU_is_add_a2,
      CPU_is_add_a3;

// For |cpu$is_addi.
logic CPU_is_addi_a2,
      CPU_is_addi_a3;

// For |cpu$is_and.
logic CPU_is_and_a2,
      CPU_is_and_a3;

// For |cpu$is_andi.
logic CPU_is_andi_a2,
      CPU_is_andi_a3;

// For |cpu$is_b.
logic CPU_is_b_a2,
      CPU_is_b_a3,
      CPU_is_b_a4,
      CPU_is_b_a5;

// For |cpu$is_ld.
logic CPU_is_ld_a2,
      CPU_is_ld_a3,
      CPU_is_ld_a4,
      CPU_is_ld_a5;

// For |cpu$is_nand.
logic CPU_is_nand_a2,
      CPU_is_nand_a3;

// For |cpu$is_or.
logic CPU_is_or_a2,
      CPU_is_or_a3;

// For |cpu$is_ori.
logic CPU_is_ori_a2,
      CPU_is_ori_a3;

// For |cpu$is_std.
logic CPU_is_std_a2,
      CPU_is_std_a3,
      CPU_is_std_a4,
      CPU_is_std_a5;

// For |cpu$is_sub.
logic CPU_is_sub_a2,
      CPU_is_sub_a3;

// For |cpu$ld_data.
logic [63:0] CPU_ld_data_a5;

// For |cpu$pc.
logic [31:0] CPU_pc_a0,
             CPU_pc_a1,
             CPU_pc_a2;

// For |cpu$po_bits.
logic [5:0] CPU_po_bits_a1,
            CPU_po_bits_a2;

// For |cpu$rd.
logic [4:0] CPU_rd_a1,
            CPU_rd_a2,
            CPU_rd_a3,
            CPU_rd_a4,
            CPU_rd_a5;

// For |cpu$rd_valid.
logic CPU_rd_valid_a1,
      CPU_rd_valid_a2,
      CPU_rd_valid_a3,
      CPU_rd_valid_a4;

// For |cpu$reset.
logic CPU_reset_a0,
      CPU_reset_a1,
      CPU_reset_a2,
      CPU_reset_a3,
      CPU_reset_a4;

// For |cpu$result.
logic [63:0] CPU_result_a3;
logic [5:2] CPU_result_a4;

// For |cpu$rf_rd_data1.
logic [63:0] CPU_rf_rd_data1_a2;

// For |cpu$rf_rd_data2.
logic [63:0] CPU_rf_rd_data2_a2;

// For |cpu$rf_rd_en1.
logic CPU_rf_rd_en1_a2;

// For |cpu$rf_rd_en2.
logic CPU_rf_rd_en2_a2;

// For |cpu$rf_rd_index1.
logic [4:0] CPU_rf_rd_index1_a2;

// For |cpu$rf_rd_index2.
logic [4:0] CPU_rf_rd_index2_a2,
            CPU_rf_rd_index2_a3,
            CPU_rf_rd_index2_a4,
            CPU_rf_rd_index2_a5;

// For |cpu$rf_wr_data.
logic [63:0] CPU_rf_wr_data_a3;

// For |cpu$rf_wr_en.
logic CPU_rf_wr_en_a3;

// For |cpu$rf_wr_index.
logic [4:0] CPU_rf_wr_index_a3;

// For |cpu$rs1.
logic [4:0] CPU_rs1_a1,
            CPU_rs1_a2,
            CPU_rs1_a3,
            CPU_rs1_a4,
            CPU_rs1_a5;

// For |cpu$rs2.
logic [4:0] CPU_rs2_a1,
            CPU_rs2_a2,
            CPU_rs2_a3,
            CPU_rs2_a4,
            CPU_rs2_a5;

// For |cpu$src1_value.
logic [63:0] CPU_src1_value_a2,
             CPU_src1_value_a3;

// For |cpu$src2_value.
logic [63:0] CPU_src2_value_a2,
             CPU_src2_value_a3,
             CPU_src2_value_a4;

// For |cpu$src3_value.
logic [63:0] CPU_src3_value_a2,
             CPU_src3_value_a3,
             CPU_src3_value_a4,
             CPU_src3_value_a5;

// For |cpu$start.
logic CPU_start_a0,
      CPU_start_a1,
      CPU_start_a2,
      CPU_start_a3,
      CPU_start_a4,
      CPU_start_a5;

// For |cpu$taken_br.
logic CPU_taken_br_a3;

// For |cpu$temp.
logic CPU_temp_a2;

// For |cpu$valid.
logic CPU_valid_a3,
      CPU_valid_a4;

// For |cpu$valid_load.
logic CPU_valid_load_a3,
      CPU_valid_load_a4,
      CPU_valid_load_a5;

// For |cpu$valid_taken_br.
logic CPU_valid_taken_br_a3,
      CPU_valid_taken_br_a4,
      CPU_valid_taken_br_a5;

// For |cpu$xo_bits.
logic [9:0] CPU_xo_bits_a1,
            CPU_xo_bits_a2;

// For |cpu/dmem$value.
logic [31:0] CPU_Dmem_value_a4 [15:0],
             CPU_Dmem_value_a5 [15:0];

// For |cpu/imem$instr.
logic [31:0] CPU_Imem_instr_a1 [7:0];

// For |cpu/xreg$value.
logic [63:0] CPU_Xreg_value_a3 [63:0],
             CPU_Xreg_value_a4 [63:0],
             CPU_Xreg_value_a5 [63:0];


//
// Scope: |cpu
//

// Clock signals.
logic clkP_CPU_dmem_rd_en_a5 ;
logic clkP_CPU_rd_valid_a2 ;
logic clkP_CPU_rd_valid_a3 ;
logic clkP_CPU_rd_valid_a4 ;
logic clkP_CPU_rd_valid_a5 ;


generate


   //
   // Scope: |cpu
   //

      // For $br_tgt_pc.
      always_ff @(posedge clk) CPU_br_tgt_pc_a3[31:0] <= CPU_br_tgt_pc_a2[31:0];

      // For $dmem_addr.
      always_ff @(posedge clk) CPU_dmem_addr_a5 <= CPU_dmem_addr_a4;

      // For $dmem_rd_data.
      always_ff @(posedge clkP_CPU_dmem_rd_en_a5) CPU_dmem_rd_data_a5[31:0] <= CPU_dmem_rd_data_a4[31:0];

      // For $dmem_rd_en.
      always_ff @(posedge clk) CPU_dmem_rd_en_a5 <= CPU_dmem_rd_en_a4;

      // For $dmem_wr_data.
      always_ff @(posedge clk) CPU_dmem_wr_data_a5[63:0] <= CPU_dmem_wr_data_a4[63:0];

      // For $dmem_wr_en.
      always_ff @(posedge clk) CPU_dmem_wr_en_a5 <= CPU_dmem_wr_en_a4;

      // For $imem_rd_addr.
      always_ff @(posedge clk) CPU_imem_rd_addr_a2[3-1:0] <= CPU_imem_rd_addr_a1[3-1:0];
      always_ff @(posedge clk) CPU_imem_rd_addr_a3[3-1:0] <= CPU_imem_rd_addr_a2[3-1:0];
      always_ff @(posedge clk) CPU_imem_rd_addr_a4[3-1:0] <= CPU_imem_rd_addr_a3[3-1:0];
      always_ff @(posedge clk) CPU_imem_rd_addr_a5[3-1:0] <= CPU_imem_rd_addr_a4[3-1:0];

      // For $imem_rd_en.
      always_ff @(posedge clk) CPU_imem_rd_en_a2 <= CPU_imem_rd_en_a1;
      always_ff @(posedge clk) CPU_imem_rd_en_a3 <= CPU_imem_rd_en_a2;
      always_ff @(posedge clk) CPU_imem_rd_en_a4 <= CPU_imem_rd_en_a3;
      always_ff @(posedge clk) CPU_imem_rd_en_a5 <= CPU_imem_rd_en_a4;

      // For $imm.
      always_ff @(posedge clk) CPU_imm_a2[63:0] <= CPU_imm_a1[63:0];
      always_ff @(posedge clk) CPU_imm_a3[63:0] <= CPU_imm_a2[63:0];
      always_ff @(posedge clk) CPU_imm_a4[63:0] <= CPU_imm_a3[63:0];
      always_ff @(posedge clk) CPU_imm_a5[63:0] <= CPU_imm_a4[63:0];

      // For $is_add.
      always_ff @(posedge clk) CPU_is_add_a3 <= CPU_is_add_a2;

      // For $is_addi.
      always_ff @(posedge clk) CPU_is_addi_a3 <= CPU_is_addi_a2;

      // For $is_and.
      always_ff @(posedge clk) CPU_is_and_a3 <= CPU_is_and_a2;

      // For $is_andi.
      always_ff @(posedge clk) CPU_is_andi_a3 <= CPU_is_andi_a2;

      // For $is_b.
      always_ff @(posedge clk) CPU_is_b_a3 <= CPU_is_b_a2;
      always_ff @(posedge clk) CPU_is_b_a4 <= CPU_is_b_a3;
      always_ff @(posedge clk) CPU_is_b_a5 <= CPU_is_b_a4;

      // For $is_ld.
      always_ff @(posedge clk) CPU_is_ld_a3 <= CPU_is_ld_a2;
      always_ff @(posedge clk) CPU_is_ld_a4 <= CPU_is_ld_a3;
      always_ff @(posedge clk) CPU_is_ld_a5 <= CPU_is_ld_a4;

      // For $is_nand.
      always_ff @(posedge clk) CPU_is_nand_a3 <= CPU_is_nand_a2;

      // For $is_or.
      always_ff @(posedge clk) CPU_is_or_a3 <= CPU_is_or_a2;

      // For $is_ori.
      always_ff @(posedge clk) CPU_is_ori_a3 <= CPU_is_ori_a2;

      // For $is_std.
      always_ff @(posedge clk) CPU_is_std_a3 <= CPU_is_std_a2;
      always_ff @(posedge clk) CPU_is_std_a4 <= CPU_is_std_a3;
      always_ff @(posedge clk) CPU_is_std_a5 <= CPU_is_std_a4;

      // For $is_sub.
      always_ff @(posedge clk) CPU_is_sub_a3 <= CPU_is_sub_a2;

      // For $pc.
      always_ff @(posedge clk) CPU_pc_a1[31:0] <= CPU_pc_a0[31:0];
      always_ff @(posedge clk) CPU_pc_a2[31:0] <= CPU_pc_a1[31:0];

      // For $po_bits.
      always_ff @(posedge clk) CPU_po_bits_a2[5:0] <= CPU_po_bits_a1[5:0];

      // For $rd.
      always_ff @(posedge clkP_CPU_rd_valid_a2) CPU_rd_a2[4:0] <= CPU_rd_a1[4:0];
      always_ff @(posedge clkP_CPU_rd_valid_a3) CPU_rd_a3[4:0] <= CPU_rd_a2[4:0];
      always_ff @(posedge clkP_CPU_rd_valid_a4) CPU_rd_a4[4:0] <= CPU_rd_a3[4:0];
      always_ff @(posedge clkP_CPU_rd_valid_a5) CPU_rd_a5[4:0] <= CPU_rd_a4[4:0];

      // For $rd_valid.
      always_ff @(posedge clk) CPU_rd_valid_a2 <= CPU_rd_valid_a1;
      always_ff @(posedge clk) CPU_rd_valid_a3 <= CPU_rd_valid_a2;
      always_ff @(posedge clk) CPU_rd_valid_a4 <= CPU_rd_valid_a3;

      // For $reset.
      always_ff @(posedge clk) CPU_reset_a1 <= CPU_reset_a0;
      always_ff @(posedge clk) CPU_reset_a2 <= CPU_reset_a1;
      always_ff @(posedge clk) CPU_reset_a3 <= CPU_reset_a2;
      always_ff @(posedge clk) CPU_reset_a4 <= CPU_reset_a3;

      // For $result.
      always_ff @(posedge clk) CPU_result_a4[5:2] <= CPU_result_a3[5:2];

      // For $rf_rd_index2.
      always_ff @(posedge clk) CPU_rf_rd_index2_a3[4:0] <= CPU_rf_rd_index2_a2[4:0];
      always_ff @(posedge clk) CPU_rf_rd_index2_a4[4:0] <= CPU_rf_rd_index2_a3[4:0];
      always_ff @(posedge clk) CPU_rf_rd_index2_a5[4:0] <= CPU_rf_rd_index2_a4[4:0];

      // For $rs1.
      always_ff @(posedge clk) CPU_rs1_a2[4:0] <= CPU_rs1_a1[4:0];
      always_ff @(posedge clk) CPU_rs1_a3[4:0] <= CPU_rs1_a2[4:0];
      always_ff @(posedge clk) CPU_rs1_a4[4:0] <= CPU_rs1_a3[4:0];
      always_ff @(posedge clk) CPU_rs1_a5[4:0] <= CPU_rs1_a4[4:0];

      // For $rs2.
      always_ff @(posedge clk) CPU_rs2_a2[4:0] <= CPU_rs2_a1[4:0];
      always_ff @(posedge clk) CPU_rs2_a3[4:0] <= CPU_rs2_a2[4:0];
      always_ff @(posedge clk) CPU_rs2_a4[4:0] <= CPU_rs2_a3[4:0];
      always_ff @(posedge clk) CPU_rs2_a5[4:0] <= CPU_rs2_a4[4:0];

      // For $src1_value.
      always_ff @(posedge clk) CPU_src1_value_a3[63:0] <= CPU_src1_value_a2[63:0];

      // For $src2_value.
      always_ff @(posedge clk) CPU_src2_value_a3[63:0] <= CPU_src2_value_a2[63:0];
      always_ff @(posedge clk) CPU_src2_value_a4[63:0] <= CPU_src2_value_a3[63:0];

      // For $src3_value.
      always_ff @(posedge clk) CPU_src3_value_a3[63:0] <= CPU_src3_value_a2[63:0];
      always_ff @(posedge clk) CPU_src3_value_a4[63:0] <= CPU_src3_value_a3[63:0];
      always_ff @(posedge clk) CPU_src3_value_a5[63:0] <= CPU_src3_value_a4[63:0];

      // For $start.
      always_ff @(posedge clk) CPU_start_a1 <= CPU_start_a0;
      always_ff @(posedge clk) CPU_start_a2 <= CPU_start_a1;
      always_ff @(posedge clk) CPU_start_a3 <= CPU_start_a2;
      always_ff @(posedge clk) CPU_start_a4 <= CPU_start_a3;
      always_ff @(posedge clk) CPU_start_a5 <= CPU_start_a4;

      // For $valid.
      always_ff @(posedge clk) CPU_valid_a4 <= CPU_valid_a3;

      // For $valid_load.
      always_ff @(posedge clk) CPU_valid_load_a4 <= CPU_valid_load_a3;
      always_ff @(posedge clk) CPU_valid_load_a5 <= CPU_valid_load_a4;

      // For $valid_taken_br.
      always_ff @(posedge clk) CPU_valid_taken_br_a4 <= CPU_valid_taken_br_a3;
      always_ff @(posedge clk) CPU_valid_taken_br_a5 <= CPU_valid_taken_br_a4;

      // For $xo_bits.
      always_ff @(posedge clk) CPU_xo_bits_a2[9:0] <= CPU_xo_bits_a1[9:0];


      //
      // Scope: /dmem[15:0]
      //
      for (dmem = 0; dmem <= 15; dmem++) begin : L1gen_CPU_Dmem
         // For $value.
         always_ff @(posedge clk) CPU_Dmem_value_a5[dmem][31:0] <= CPU_Dmem_value_a4[dmem][31:0];

      end

      //
      // Scope: /xreg[63:0]
      //
      for (xreg = 0; xreg <= 63; xreg++) begin : L1gen_CPU_Xreg
         // For $value.
         always_ff @(posedge clk) CPU_Xreg_value_a4[xreg][63:0] <= CPU_Xreg_value_a3[xreg][63:0];
         always_ff @(posedge clk) CPU_Xreg_value_a5[xreg][63:0] <= CPU_Xreg_value_a4[xreg][63:0];

      end



endgenerate



//
// Gated clocks.
//

generate



   //
   // Scope: |cpu
   //

      clk_gate gen_clkP_CPU_dmem_rd_en_a5(clkP_CPU_dmem_rd_en_a5, clk, 1'b1, CPU_dmem_rd_en_a4, 1'b0);
      clk_gate gen_clkP_CPU_rd_valid_a2(clkP_CPU_rd_valid_a2, clk, 1'b1, CPU_rd_valid_a1, 1'b0);
      clk_gate gen_clkP_CPU_rd_valid_a3(clkP_CPU_rd_valid_a3, clk, 1'b1, CPU_rd_valid_a2, 1'b0);
      clk_gate gen_clkP_CPU_rd_valid_a4(clkP_CPU_rd_valid_a4, clk, 1'b1, CPU_rd_valid_a3, 1'b0);
      clk_gate gen_clkP_CPU_rd_valid_a5(clkP_CPU_rd_valid_a5, clk, 1'b1, CPU_rd_valid_a4, 1'b0);



endgenerate



//
// Debug Signals
//

generate

   if (1) begin : DEBUG_SIGS


      //
      // Scope: |cpu
      //
      if (1) begin : \|cpu 
         logic [31:0] \>@2$br_tgt_pc ;
         assign \>@2$br_tgt_pc = CPU_br_tgt_pc_a2;
         logic  \>@4$dmem_addr ;
         assign \>@4$dmem_addr = CPU_dmem_addr_a4;
         logic [31:0] \>?$dmem_rd_en@4$dmem_rd_data ;
         assign \>?$dmem_rd_en@4$dmem_rd_data = CPU_dmem_rd_data_a4;
         logic  \>@4$dmem_rd_en ;
         assign \>@4$dmem_rd_en = CPU_dmem_rd_en_a4;
         logic [63:0] \>@4$dmem_wr_data ;
         assign \>@4$dmem_wr_data = CPU_dmem_wr_data_a4;
         logic  \>@4$dmem_wr_en ;
         assign \>@4$dmem_wr_en = CPU_dmem_wr_en_a4;
         logic [3-1:0] \>@1$imem_rd_addr ;
         assign \>@1$imem_rd_addr = CPU_imem_rd_addr_a1;
         logic [31:0] \>?$imem_rd_en@1$imem_rd_data ;
         assign \>?$imem_rd_en@1$imem_rd_data = CPU_imem_rd_data_a1;
         logic  \>@1$imem_rd_en ;
         assign \>@1$imem_rd_en = CPU_imem_rd_en_a1;
         logic [63:0] \>@1$imm ;
         assign \>@1$imm = CPU_imm_a1;
         logic [31:0] \>@1$inc_pc ;
         assign \>@1$inc_pc = CPU_inc_pc_a1;
         logic [31:0] \>@1$instr ;
         assign \>@1$instr = CPU_instr_a1;
         logic  \>@2$is_add ;
         assign \>@2$is_add = CPU_is_add_a2;
         logic  \>@2$is_addi ;
         assign \>@2$is_addi = CPU_is_addi_a2;
         logic  \>@2$is_and ;
         assign \>@2$is_and = CPU_is_and_a2;
         logic  \>@2$is_andi ;
         assign \>@2$is_andi = CPU_is_andi_a2;
         logic  \>@2$is_b ;
         assign \>@2$is_b = CPU_is_b_a2;
         logic  \>@2$is_ld ;
         assign \>@2$is_ld = CPU_is_ld_a2;
         logic  \>@2$is_nand ;
         assign \>@2$is_nand = CPU_is_nand_a2;
         logic  \>@2$is_or ;
         assign \>@2$is_or = CPU_is_or_a2;
         logic  \>@2$is_ori ;
         assign \>@2$is_ori = CPU_is_ori_a2;
         logic  \>@2$is_std ;
         assign \>@2$is_std = CPU_is_std_a2;
         logic  \>@2$is_sub ;
         assign \>@2$is_sub = CPU_is_sub_a2;
         logic [63:0] \>@5$ld_data ;
         assign \>@5$ld_data = CPU_ld_data_a5;
         logic [31:0] \>@0$pc ;
         assign \>@0$pc = CPU_pc_a0;
         logic [5:0] \>@1$po_bits ;
         assign \>@1$po_bits = CPU_po_bits_a1;
         logic [4:0] \>?$rd_valid@1$rd ;
         assign \>?$rd_valid@1$rd = CPU_rd_a1;
         logic  \>@1$rd_valid ;
         assign \>@1$rd_valid = CPU_rd_valid_a1;
         logic  \>@0$reset ;
         assign \>@0$reset = CPU_reset_a0;
         logic [63:0] \>@3$result ;
         assign \>@3$result = CPU_result_a3;
         logic [63:0] \>?$rf_rd_en1@2$rf_rd_data1 ;
         assign \>?$rf_rd_en1@2$rf_rd_data1 = CPU_rf_rd_data1_a2;
         logic [63:0] \>?$rf_rd_en2@2$rf_rd_data2 ;
         assign \>?$rf_rd_en2@2$rf_rd_data2 = CPU_rf_rd_data2_a2;
         logic  \>@2$rf_rd_en1 ;
         assign \>@2$rf_rd_en1 = CPU_rf_rd_en1_a2;
         logic  \>@2$rf_rd_en2 ;
         assign \>@2$rf_rd_en2 = CPU_rf_rd_en2_a2;
         logic [4:0] \>@2$rf_rd_index1 ;
         assign \>@2$rf_rd_index1 = CPU_rf_rd_index1_a2;
         logic [4:0] \>@2$rf_rd_index2 ;
         assign \>@2$rf_rd_index2 = CPU_rf_rd_index2_a2;
         logic [63:0] \>@3$rf_wr_data ;
         assign \>@3$rf_wr_data = CPU_rf_wr_data_a3;
         logic  \>@3$rf_wr_en ;
         assign \>@3$rf_wr_en = CPU_rf_wr_en_a3;
         logic [4:0] \>@3$rf_wr_index ;
         assign \>@3$rf_wr_index = CPU_rf_wr_index_a3;
         logic [4:0] \>@1$rs1 ;
         assign \>@1$rs1 = CPU_rs1_a1;
         logic [4:0] \>@1$rs2 ;
         assign \>@1$rs2 = CPU_rs2_a1;
         logic [63:0] \>@2$src1_value ;
         assign \>@2$src1_value = CPU_src1_value_a2;
         logic [63:0] \>@2$src2_value ;
         assign \>@2$src2_value = CPU_src2_value_a2;
         logic [63:0] \>@2$src3_value ;
         assign \>@2$src3_value = CPU_src3_value_a2;
         logic  \>@0$start ;
         assign \>@0$start = CPU_start_a0;
         logic  \>@3$taken_br ;
         assign \>@3$taken_br = CPU_taken_br_a3;
         logic  \>@2$temp ;
         assign \>@2$temp = CPU_temp_a2;
         logic  \>@3$valid ;
         assign \>@3$valid = CPU_valid_a3;
         logic  \>@3$valid_load ;
         assign \>@3$valid_load = CPU_valid_load_a3;
         logic  \>@3$valid_taken_br ;
         assign \>@3$valid_taken_br = CPU_valid_taken_br_a3;
         logic [9:0] \>@1$xo_bits ;
         assign \>@1$xo_bits = CPU_xo_bits_a1;

         //
         // Scope: /dmem[15:0]
         //
         for (dmem = 0; dmem <= 15; dmem++) begin : \/dmem 
            logic [31:0] \>>@4$value ;
            assign \>>@4$value = CPU_Dmem_value_a4[dmem];
            logic  \>>@4$wr ;
            assign \>>@4$wr = L1_CPU_Dmem[dmem].L1_wr_a4;
         end

         //
         // Scope: /imem[7:0]
         //
         for (imem = 0; imem <= 7; imem++) begin : \/imem 
            logic [31:0] \>>@1$instr ;
            assign \>>@1$instr = CPU_Imem_instr_a1[imem];
         end

         //
         // Scope: /xreg[63:0]
         //
         for (xreg = 0; xreg <= 63; xreg++) begin : \/xreg 
            logic [63:0] \>>@3$value ;
            assign \>>@3$value = CPU_Xreg_value_a3[xreg];
            logic  \>>@3$wr ;
            assign \>>@3$wr = L1_CPU_Xreg[xreg].L1_wr_a3;
         end
      end


   end

endgenerate




generate   // This is awkward, but we need to go into 'generate' context in the line that `includes the declarations file.
